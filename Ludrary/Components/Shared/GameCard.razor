@inject StaticDataService StaticData

<div class="game-card" 
	 @onclick="NavigateToInfoPage"
	 @onmouseenter="StartSlideShow"
	 @onmouseleave="StopSlideShow">

	<div class="game-img-container">
		<img src="@_currentImageUrl" alt="@Game.Name" class="game-img">
	</div>


	<div class="game-content">
		<h3 class="game-title">@Game.Name</h3>

		<div class="game-meta">
			@if (Game.Metacritic.HasValue)
			{
				<span class="metacritic-score @GetMetacriticClass(Game.Metacritic.Value)">
					@Game.Metacritic
				</span>
			}
			@if (!string.IsNullOrEmpty(Game.Released))
			{
				<span class="release-date">
					@DateTime.Parse(Game.Released).ToString("dd MMM yyyy")
				</span>
			}
		</div>

		@if (Game.Tags != null && Game.Tags.Any())
		{
			<div class="game-tags">
				@foreach (var tag in Game.Tags.Where(t => StaticData.IsTagSelected(t.Id)).Take(3))
				{
					<span class="game-tag">@tag.Name</span>
				}
			</div>
		}

		@if (Game.Stores != null && Game.Stores.Any())
		{
			<div class="game-stores">
				@foreach (var storeEntry in Game.Stores)
				{
					var iconClass = GetStoreIcon(storeEntry.Store.Slug);

					@if (!string.IsNullOrEmpty(iconClass))
					{
						<span class="store-icon @iconClass"></span>
					}
				}
			</div>
		}
	</div>
</div>

	



@code {
	[Inject]
	public NavigationManager NavigationManager { get; set; }

	[Parameter]
	public Game Game { get; set; }

	private string _currentImageUrl;
	private Timer _screenshotTimer;
	private int _screenshotIndex = 0;

	protected override void OnInitialized()
	{
		_currentImageUrl = Game.BackgroundImage;
	}
	private string GetMetacriticClass(int score)
	{
		if (score >= 75) return "metacritic-high";
		if (score >= 50) return "metacritic-medium";
		return "metacritic-low";
	}

	private void ChangeScreenshot()
	{
		_screenshotIndex++;
		if (_screenshotIndex >= Game.ShortScreenshots.Count)
		{
			_screenshotIndex = 0;
		}

		_currentImageUrl = Game.ShortScreenshots[_screenshotIndex].ImageUrl;

		InvokeAsync(StateHasChanged);
	}

	private void StartSlideShow()
	{
		if(Game.ShortScreenshots == null || Game.ShortScreenshots.Count <=1)
		{
			return;
		}

		_screenshotTimer = new Timer(1000);
		_screenshotTimer.Elapsed += (sender, e) => ChangeScreenshot();
		_screenshotTimer.AutoReset = true;
		_screenshotTimer.Enabled = true;

		ChangeScreenshot();

	}

	private void StopSlideShow()
	{
		_screenshotTimer?.Stop();
		_screenshotTimer?.Dispose();

		_currentImageUrl = Game.BackgroundImage;
		StateHasChanged(); 
	}

	private void NavigateToInfoPage()
	{
		NavigationManager.NavigateTo($"/game/{Game.Id}");
	}
	private string GetStoreIcon(string slug)
	{
		return slug switch
		{
			"steam" => "fab fa-steam",
			"playstation-store" => "fab fa-playstation",
			"xbox-store" => "fab fa-xbox",
			"nintendo" => "fas fa-gamepad",
			"gog" => "fas fa-database", 
			"epic-games" => "fas fa-epic-games",
			"google-play" => "fab fa-google-play",
			"apple-appstore" => "fab fa-app-store-ios",
			_ => "" 
		};
	}


}
