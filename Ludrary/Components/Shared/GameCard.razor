@inject StaticDataService StaticData


<div class="game-card" 
@onclick="NavigateToInfoPage"
@onmouseenter="StartSlideShow"
@onmouseleave="StopSlideShow">
	<img class="game-card-image" src="@_currentImageUrl" alt="@Game.Name" />
	<div class="game-card-body">
		<h5 class="game-card-title">@Game.Name</h5>
		@if (Game.Metacritic.HasValue)
		{
			<span class="metacritic-score">@Game.Metacritic</span>
		}
		@if (Game.Tags != null && Game.Tags.Any())
		{
			<div class="game-tags">
				@{
					int tagsToShow = 0;
					@foreach (var tag in Game.Tags)
					{
						if(StaticData.IsTagSelected(tag.Id) && tagsToShow < 3)
						{
							<span class="tag">@tag.Name</span>
							tagsToShow++;
						}
					}
				}
				
			</div>
		}
		
		
	</div>
</div>
	



@code {
	[Inject]
	public NavigationManager NavigationManager { get; set; }

	[Parameter]
	public Game Game { get; set; }

	private string _currentImageUrl;
	private Timer _screenshotTimer;
	private int _screenshotIndex = 0;

	protected override void OnInitialized()
	{
		_currentImageUrl = Game.BackgroundImage;
	}
	private void ChangeScreenshot()
	{
		_screenshotIndex++;
		if (_screenshotIndex >= Game.ShortScreenshots.Count)
		{
			_screenshotIndex = 0;
		}

		_currentImageUrl = Game.ShortScreenshots[_screenshotIndex].ImageUrl;

		InvokeAsync(StateHasChanged);
	}

	private void StartSlideShow()
	{
		if(Game.ShortScreenshots == null || Game.ShortScreenshots.Count <=1)
		{
			return;
		}

		_screenshotTimer = new Timer(1000);
		_screenshotTimer.Elapsed += (sender, e) => ChangeScreenshot();
		_screenshotTimer.AutoReset = true;
		_screenshotTimer.Enabled = true;

		ChangeScreenshot();

	}

	private void StopSlideShow()
	{
		_screenshotTimer?.Stop();
		_screenshotTimer?.Dispose();

		_currentImageUrl = Game.BackgroundImage;
		StateHasChanged(); 
	}

	private void NavigateToInfoPage()
	{
		NavigationManager.NavigateTo($"/game/{Game.Id}");
	}


}
