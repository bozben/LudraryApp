@inject RawgApiService RawgApi
@inject StaticDataService StaticData

@if (_isLoading)
{
    <LoadingSpinner />
}
else
{
    <div class="advanced-filter-layout">
        <div class="filter-panel">
            <div class="genre-group">
                <h5>GENRES</h5>
                <div class="checkbox-list">
                    @foreach (var genre in _allGenres)
                    {
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="genre-@genre.Id"
                                   checked="@(SearchParameters.GenreIds.Contains(genre.Id))"
                                   @onchange="@((ChangeEventArgs e) => GenreSelectionChanged(e, genre))" />
                            <label class="form-check-label" for="genre-@genre.Id">
                                @genre.Name
                            </label>
                        </div>
                    }
                </div>
            </div>

            <div class="platform-group">
                <h5>PLATFORMS</h5>
                <div class="checkbox-list">
                    @foreach (var platform in _allPlatforms)
                    {
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="platform-@platform.Id"
                                   checked="@(SearchParameters.PlatformIds.Contains(platform.Id))"
                                   @onchange="@((ChangeEventArgs e) => PlatformSelectionChanged(e, platform))" />
                            <label class="form-check-label" for="platform-@platform.Id">
                                @platform.Name
                            </label>
                        </div>
                    }
                </div>
            </div>

            <div class="tag-group">
                <h5>TAGS</h5>
                <div class="checkbox-list">
                    <div class="tag-columns">
                        <div class="tag-column">
                            <h6>Gameplay</h6>
                            @foreach (var tag in StaticData.GameplayTags)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="tag-@tag.Id"
                                           checked="@(SearchParameters.TagIds.Contains(tag.Id))"
                                           @onchange="@((ChangeEventArgs e) => TagSelectionChanged(e, tag))" />
                                    <label class="form-check-label" for="tag-@tag.Id">@tag.Name</label>
                                </div>
                            }
                        </div>
                        <div class="tag-column">
                            <h6>Theme & Atmosphere</h6>
                            @foreach (var tag in StaticData.ThemeTags)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="tag-@tag.Id"
                                           checked="@(SearchParameters.TagIds.Contains(tag.Id))"
                                           @onchange="@((ChangeEventArgs e) => TagSelectionChanged(e, tag))" />
                                    <label class="form-check-label" for="tag-@tag.Id">@tag.Name</label>
                                </div>
                            }
                        </div>
                        <div class="tag-column">
                            <h6>Visual Style & Others</h6>
                            @foreach (var tag in StaticData.StyleTags)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="tag-@tag.Id"
                                           checked="@(SearchParameters.TagIds.Contains(tag.Id))"
                                           @onchange="@((ChangeEventArgs e) => TagSelectionChanged(e, tag))" />
                                    <label class="form-check-label" for="tag-@tag.Id">@tag.Name</label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <hr class="filter-divider" />

        <div class="range-filters">
            <div class="filter-group">
                <h5>RELEASE YEAR</h5>
                <div class="range-inputs">
                    <select @bind="SearchParameters.StartYear" class="form-select">
                        <option value="">From</option> 
                        @for (int year = DateTime.Now.Year; year >= 1960; year--)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                    <span>-</span>
                    <select @bind="SearchParameters.EndYear" class="form-select">
                        <option value="">To</option>
                        @for (int year = DateTime.Now.Year; year >= 1960; year--)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
            </div>

            <div class="filter-group">
                <h5>METACRITIC SCORE</h5>
                <select class="form-select" @onchange="HandleMetacriticChange">
                    <option value="">Any Score</option>
                    <option value="90,100">90+ (Masterpiece)</option>
                    <option value="80,89">80-89 (Great)</option>
                    <option value="70,79">70-79 (Good)</option>
                    <option value="60,69">60-69 (Mixed)</option>
                    <option value="0,59">Below 60 (Negative)</option>
                </select>
            </div>
        </div>

        <div class="filter-actions">
            <button type="button" @onclick="ResetFilters" class="btn-reset">Reset All</button>
            <button type="button" @onclick="Search" class="btn-primary">Apply Filters</button>
        </div>

    </div>
}





@code {
    [Parameter]
    public SearchParameters SearchParameters { get; set; } = new();

    private List<Genre> _allGenres = new();
    private List<Platform> _allPlatforms = new();
    private bool _isLoading = true;

    [Parameter]
    public EventCallback<SearchParameters> OnSearchClicked { get; set; }

    private Task Search()
    {
        return OnSearchClicked.InvokeAsync(SearchParameters);
    }
    private void ResetFilters()
    {
        SearchParameters = new SearchParameters();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _allGenres = await RawgApi.GetGenresAsync();
            _allPlatforms = await RawgApi.GetPlatformsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to laod filter data{ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
    private void GenreSelectionChanged(ChangeEventArgs e, Genre genre)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!SearchParameters.GenreIds.Contains(genre.Id))
            {
                SearchParameters.GenreIds.Add(genre.Id);
            }
        }
        else
        {
            if (SearchParameters.GenreIds.Contains(genre.Id))
            {
                SearchParameters.GenreIds.Remove(genre.Id);
            }
        }
    }

    private void PlatformSelectionChanged(ChangeEventArgs e, Platform platform)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!SearchParameters.PlatformIds.Contains(platform.Id))
            {
                SearchParameters.PlatformIds.Add(platform.Id);
            }
        }
        else
        {
            if (SearchParameters.PlatformIds.Contains(platform.Id))
            {
                SearchParameters.PlatformIds.Remove(platform.Id);
            }
        }
    }

    private void TagSelectionChanged(ChangeEventArgs e, Tag tag)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!SearchParameters.TagIds.Contains(tag.Id))
            {
                SearchParameters.TagIds.Add(tag.Id);
            }
        }
        else
        {
            if (SearchParameters.TagIds.Contains(tag.Id))
            {
                SearchParameters.TagIds.Remove(tag.Id);
            }
        }
    }
    private void HandleMetacriticChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();

        if (string.IsNullOrEmpty(selectedValue))
        {
            SearchParameters.MinMetacritic = null;
            SearchParameters.MaxMetacritic = null;
            return;
        }

        var scoreParts = selectedValue.Split(',');

        if (scoreParts.Length == 2)
        {
            if (int.TryParse(scoreParts[0], out int minScore))
            {
                SearchParameters.MinMetacritic = minScore;
            }
            if (int.TryParse(scoreParts[1], out int maxScore))
            {
                SearchParameters.MaxMetacritic = maxScore;
            }
        }
    }

    
}

