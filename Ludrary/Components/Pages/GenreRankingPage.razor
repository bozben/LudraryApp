@inject RawgApiService RawgApi
@page "/genres/{GenreSlug}"
<PageTitle>Best @GenreSlug.Replace("-", " ").ToUpper() Games</PageTitle>

@if (isLoading)
{
	<LoadingSpinner />
}
else if(!string.IsNullOrEmpty(_errorMessage))
{
	<p class="alert alert-danger">@_errorMessage</p>
}
else
{
	<div class="list-page-container">
		<section class="list-hero">
			<h1 class="list-title">
				BEST @GenreSlug.Replace("-", " ").ToUpper() GAMES
			</h1>
			<p class="list-description">
				@((MarkupString)_genreDescription)
			</p>
		</section>

		@if (bestOfAll != null && bestOfAll.Any())
		{
			<section class="ranking-section">
				<div class="section-header">
					<h2 class="section-title">Of All Time</h2>
				</div>
				<div class="games-grid">
					@foreach (var game in bestOfAll)
					{
						<GameCard Game="game" />
					}
				</div>
			</section>
		}

		@if (bestOf20s != null && bestOf20s.Any())
		{
			<section class="ranking-section">
				<div class="section-header">
					<h2 class="section-title">Of the 2020s</h2>
				</div>
				<div class="games-grid">
					@foreach (var game in bestOf20s)
					{
						<GameCard Game="game" />
					}
				</div>
			</section>
		}

		@if (bestOf10s != null && bestOf10s.Any())
		{
			<section class="ranking-section">
				<div class="section-header">
					<h2 class="section-title">Of the 2010s</h2>
				</div>
				<div class="games-grid">
					@foreach (var game in bestOf10s)
					{
						<GameCard Game="game" />
					}
				</div>
			</section>
		}
	</div>
}


@code {
	[Parameter]
	public string GenreSlug { get; set; }

	private List<Game> bestOfAll { get; set; }
	private List<Game> bestOf10s { get; set; }
	private List<Game> bestOf20s { get; set; }

	private bool isLoading = true;

	private string _errorMessage = "";
	private string _genreDescription;


	protected override async Task OnParametersSetAsync()
	{
		isLoading = true;
		_errorMessage = null;
		StateHasChanged();
		try
		{
			var allTimeParams = new SearchParameters
				{
					GenreSlug = this.GenreSlug,
					Ordering = "-metacritic"
				};
			bestOfAll = await RawgApi.SearchGamesAsync(allTimeParams);

			var decade2010params = new SearchParameters
				{
					GenreSlug = this.GenreSlug,
					Ordering = "-metacritic",
					StartYear = 2010,
					EndYear = 2019
				};
			bestOf10s = await RawgApi.SearchGamesAsync(decade2010params);

			var decade2020params = new SearchParameters
			{
				GenreSlug = this.GenreSlug,
				Ordering = "-metacritic",
				StartYear = 2020,
				EndYear = 2029
			};
			bestOf20s = await RawgApi.SearchGamesAsync(decade2020params);

			var genreDetails = await RawgApi.GetGenreDetailsAsync(GenreSlug);
			if (genreDetails != null)
			{
				_genreDescription = genreDetails.Description;
			}

		}
		catch (Exception ex)
		{
			_errorMessage = $"Failed to load rankings: {ex.Message}";
		}
		finally
		{
			isLoading = false;
		}
	}


}
