@inject RawgApiService RawgApi
@inject StaticDataService StaticData

@page "/game/{Id:int}"
<PageTitle>@(gameInfo?.Name ?? "Loading...")</PageTitle>


@if (_isLoading==true)
{
	<LoadingSpinner />
}
else if (!string.IsNullOrEmpty(errorMessage))
{
	<p class="alert alert-danger">@errorMessage</p>
}
else
{
	<div class="game-detail-container">
		<section class="game-hero">
			<div class="game-cover">
				<img src="@gameInfo.BackgroundImage" alt="@gameInfo.Name" />
			</div>

			<div class="game-header">
				<h1 class="game-title">@gameInfo.Name</h1>

				@if (gameInfo.Metacritic.HasValue)
				{
					<div class="game-rating">
						<div class="rating-value @GetMetacriticClass(gameInfo.Metacritic.Value)">@gameInfo.Metacritic.Value</div>
						<div class="rating-label">Metacritic Score</div>
					</div>
				}
			</div>
		</section>

		<section class="game-details">
			<div class="game-description">
				<h2 class="section-title">About @gameInfo.Name</h2>
				<p>@((MarkupString)gameInfo.Description.Replace("\n", "<br/>"))</p>
			</div>

			<div class="game-info">
                <div class="info-item">
                    <div class="info-label">Developers</div>
					<div class="info-value">@((MarkupString)GetDeveloperNames())</div>
                </div>

				@if (gameInfo.Publishers != null && gameInfo.Publishers.Any())
				{
					<div class="info-item">
						<div class="info-label">Publishers</div>
						<div class="info-value">@((MarkupString)GetPublisherNames())</div>
					</div>
				}

				@if (!string.IsNullOrEmpty(gameInfo.Released))
				{
					<div class="info-item">
						<div class="info-label">Release Date</div>
						<div class="info-value">@DateTime.Parse(gameInfo.Released).ToString("dd MMMM yyyy")</div>
					</div>
				}<div class="info-item">
                    <div class="info-label">Platforms</div>
                    <div class="info-value">@GetPlatformNames()</div>
                </div>
                
                <div class="info-item">
                    <div class="info-label">Genres</div>
                    <div class="info-value">@GetGenreNames()</div>
                </div>

                <div class="info-item">
                    <div class="info-label">Tags</div>
                    <div class="game-tags">
                        @foreach (var tag in gameInfo.Tags.Where(t => StaticData.IsTagSelected(t.Id)))
                        {
                            <span class="game-tag">@tag.Name</span>
                        }
                    </div>
				</div>
			</div>
		</section>

		
		@if (gameInfo.ShortScreenshots != null && gameInfo.ShortScreenshots.Count > 1)
		{
			<section class="screenshots-section">
				<h2 class="section-title">Screenshots</h2>
				<div class="screenshots-grid">
					@foreach (var screenshot in gameInfo.ShortScreenshots.Skip(1))
					{
						<div class="screenshot-item">
							<img src="@screenshot.ImageUrl" alt="@gameInfo.Name Screenshot">
						</div>
					}
				</div>
			</section>
		}
		@if (gamesInSeries != null && gamesInSeries.Any())
		{
			<section class="series-section">
				<h2 class="section-title">More From This Series</h2>
				<div class="games-grid">
					@foreach (var game in gamesInSeries)
					{
						if (game.Id != gameInfo.Id)
						{
							<GameCard Game="game" />
						}
					}
				</div>
			</section>
		}
		
	</div>
	
}

@code {
	[Parameter]
	public int Id { get; set; }

	private GameInfo gameInfo;
	private string errorMessage;
	private bool _isLoading = true;
	private List<Game> gamesInSeries = new();

	protected override async Task OnParametersSetAsync()
	{
		errorMessage = null;
		_isLoading = true;
		StateHasChanged();
		try
		{
			gameInfo = await RawgApi.GetGameInfoAsync(Id);
			gamesInSeries = await RawgApi.GetGamesInSeriesAsync(Id);
		}
		catch (Exception ex)
		{
			errorMessage = $"Bir hata oluştu: {ex.Message}";
		}
		finally
		{
			_isLoading = false;
		}
	}

	private string GetDeveloperNames()
	{
		var devoloperLinks = new List<string>();
		if(gameInfo.Developers != null && gameInfo.Developers.Any())
		{
			foreach(var dev in gameInfo.Developers)
			{
				if (!string.IsNullOrEmpty(dev.Slug))
				{
					devoloperLinks.Add($"<a href=\"/creator/developers/{dev.Slug}\">{dev.Name}</a>");
				}
				else
				{
					devoloperLinks.Add(dev.Name);
				}
			}
			return string.Join(", ", devoloperLinks);

		}
		else
		{
			return "Not Available";
		}
	}
	private string GetGenreNames()
	{
		List<string> genreNames = new();
		if (gameInfo.Genres != null && gameInfo.Genres.Any())
		{
			foreach (var genre in gameInfo.Genres)
			{
				genreNames.Add(genre.Name);
			}
			return string.Join(", ", genreNames);
		}
		else
		{
			return "Not Available";
		}
	}

	private string GetPlatformNames()
	{
		List<string> platformNames = new();
		if (gameInfo!=null && gameInfo.Platforms != null && gameInfo.Platforms.Any())
		{
			foreach (var platform in gameInfo.Platforms)
			{
				platformNames.Add(platform.Platform.Name);
			}
			return string.Join(", ", platformNames);
		}
		else
		{
			return "Not Available";
		}
	}

	private string GetTagNames()
	{
		List<string> tagNames = new();
		if (gameInfo != null && gameInfo.Tags != null && gameInfo.Tags.Any())
		{
			foreach (var tag in gameInfo.Tags)
			{
				if (StaticData.IsTagSelected(tag.Id))
				{
					tagNames.Add(tag.Name);
				}
			}
			return string.Join(", ", tagNames);
		}
		else
		{
			return "Not Available";
		}
	}
	private string GetMetacriticClass(int score)
	{
		string result = "";
		if (score >= 80)
		{
			result = "metacritic-high";
		}else if (score >= 50)
		{
			result = "metacritic-medium";
		}
		else
		{
			result = "metacritic-low";
		}
		return result;
	}
	private string GetPublisherNames()
	{
		var publisherLinks = new List<string>();

		if(gameInfo.Publishers !=null && gameInfo.Publishers.Any())
		{
			foreach (var pub in gameInfo.Publishers)
			{
				if (!string.IsNullOrEmpty(pub.Slug))
				{
					publisherLinks.Add($"<a href=\"/creator/publishers/{pub.Slug}\">{pub.Name}</a>");
				}
				else
				{
					publisherLinks.Add(pub.Name);
				}	
			}
			return string.Join(", ", publisherLinks);
		}
		else
		{
			return "Not available";
		}
	}


	
}
